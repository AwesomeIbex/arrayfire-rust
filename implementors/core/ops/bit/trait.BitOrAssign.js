(function() {var implementors = {};
implementors["arrayfire"] = [{text:"impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"struct\" href=\"arrayfire/struct.Array.html\" title=\"struct arrayfire::Array\">Array</a>&lt;B&gt;&gt; for <a class=\"struct\" href=\"arrayfire/struct.Array.html\" title=\"struct arrayfire::Array\">Array</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"arrayfire/trait.HasAfEnum.html\" title=\"trait arrayfire::HasAfEnum\">HasAfEnum</a> + <a class=\"trait\" href=\"arrayfire/trait.ImplicitPromote.html\" title=\"trait arrayfire::ImplicitPromote\">ImplicitPromote</a>&lt;B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: <a class=\"trait\" href=\"arrayfire/trait.HasAfEnum.html\" title=\"trait arrayfire::HasAfEnum\">HasAfEnum</a> + <a class=\"trait\" href=\"arrayfire/trait.ImplicitPromote.html\" title=\"trait arrayfire::ImplicitPromote\">ImplicitPromote</a>&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as <a class=\"trait\" href=\"arrayfire/trait.ImplicitPromote.html\" title=\"trait arrayfire::ImplicitPromote\">ImplicitPromote</a>&lt;B&gt;&gt;::<a class=\"type\" href=\"arrayfire/trait.ImplicitPromote.html#associatedtype.Output\" title=\"type arrayfire::ImplicitPromote::Output\">Output</a>: <a class=\"trait\" href=\"arrayfire/trait.HasAfEnum.html\" title=\"trait arrayfire::HasAfEnum\">HasAfEnum</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as <a class=\"trait\" href=\"arrayfire/trait.ImplicitPromote.html\" title=\"trait arrayfire::ImplicitPromote\">ImplicitPromote</a>&lt;A&gt;&gt;::<a class=\"type\" href=\"arrayfire/trait.ImplicitPromote.html#associatedtype.Output\" title=\"type arrayfire::ImplicitPromote::Output\">Output</a>: <a class=\"trait\" href=\"arrayfire/trait.HasAfEnum.html\" title=\"trait arrayfire::HasAfEnum\">HasAfEnum</a>,&nbsp;</span>",synthetic:false,types:["arrayfire::array::Array"]},];
implementors["num_bigint"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"struct\" href=\"num_bigint/struct.BigInt.html\" title=\"struct num_bigint::BigInt\">BigInt</a>&gt; for <a class=\"struct\" href=\"num_bigint/struct.BigInt.html\" title=\"struct num_bigint::BigInt\">BigInt</a>",synthetic:false,types:["num_bigint::bigint::BigInt"]},{text:"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"num_bigint/struct.BigInt.html\" title=\"struct num_bigint::BigInt\">BigInt</a>&gt; for <a class=\"struct\" href=\"num_bigint/struct.BigInt.html\" title=\"struct num_bigint::BigInt\">BigInt</a>",synthetic:false,types:["num_bigint::bigint::BigInt"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"struct\" href=\"num_bigint/struct.BigUint.html\" title=\"struct num_bigint::BigUint\">BigUint</a>&gt; for <a class=\"struct\" href=\"num_bigint/struct.BigUint.html\" title=\"struct num_bigint::BigUint\">BigUint</a>",synthetic:false,types:["num_bigint::biguint::BigUint"]},{text:"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"num_bigint/struct.BigUint.html\" title=\"struct num_bigint::BigUint\">BigUint</a>&gt; for <a class=\"struct\" href=\"num_bigint/struct.BigUint.html\" title=\"struct num_bigint::BigUint\">BigUint</a>",synthetic:false,types:["num_bigint::biguint::BigUint"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()